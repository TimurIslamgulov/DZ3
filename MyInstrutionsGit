
# Инструкция для работы с Git и удалёнными репозиториями. #

## Что такое Git?

Git - одна из самых популярных систем контроля версий. Вмещает в себя локальные и удаленные репозитории.

## Создание репозитория.

Для создания репозитория, необходимо выполнить команду в терминале **git init** в открытой папке через *MS Visual Studio Code*, в которой планируется хранить репозиторий. Таким образом создается репозиторий.
Теперь Git будет фиксировать все изменения в данной папке.

## Создание коммитов.

### *Git add.*

Для добавления изменений в коммит используется команда **git add** 

**git add** *<имя файла>* - для добавления конкретного файла в репозиторий

**git add** -all - для добавления всех фалов из репозитория

Далее вводим команду **git commit** -m "<комментарий>", чтобы создать коммит

Обязательно указываем комментарий (указывается в кавычках)

### *Проосмотр состояния репозитория*

Для того чтобы посмотреть состояние репозитория используется команда **git status** - отображает наличие изменеий в файлах.

### *Просмотр истории коммитов.*

Команда **git log** используется для просмотра истории коммитов, начиная с самого свежего и уходя к истокам проекта. По умолчанию, она показывает лишь историю текущей ветки, но может быть настроена на вывод истории других, даже нескольких сразу, веток. Также её можно использовать для просмотра различий между ветками на уровне коммитов.

**git log** --oneline - просмотр изменений в одну строчку (более удобный вариант для просмотра)

**git log** --graph - графическое отображение изменений

## Другие команды Git

+ **git help** - справка по всем командам

+ **git clone** - создание копии репозитория, который находится по ссылке (<ссылка на репозиторий>), и можно указать название новой папки, в которую Git скопирует репозиторий (<название папки>). Если его не указать, папка будет называться так же, как и сам репозиторий.

+ **git branch** - своего рода “менеджер веток”. Она умеет перечислять ваши ветки, создавать новые, удалять и переименовывать их.

**git branch** <имя ветки> - создание конкретной ветки.

+ **git checkout** - используется для переключения веток и выгрузки их содержимого в рабочую директорию.

Команда **git checkout** также принимает аргумент **-b**, который действует как вспомогательный метод, позволяя создать новую ветку и сразу переключиться на нее. Вы можете работать сразу с несколькими функциями в одном репозитории, переключаясь между ними с помощью **git checkout**.
**git checkout -b ＜new-branch＞**

+ **git merge** - используется для слияния одной или нескольких веток в текущую. Затем она устанавливает указатель текущей ветки на результирующий коммит.

+ **git remote** - служит для управления списком удалённых репозиториев. Она позволяет сохранять длинные URL репозиториев в виде понятных коротких строк, например "origin", так что вам не придётся забивать голову всякой ерундой и набирать её каждый раз для связи с сервером. Вы можете использовать несколько удалённых репозиториев для работы и git remote поможет добавлять, изменять и удалять их. 

+ **git fetch** - связывается с удалённым репозиторием и забирает из него все изменения, которых у вас пока нет и сохраняет их локально.

+ **git push** - используется для установления связи с удалённым репозиторием, вычисления локальных изменений отсутствующих в нём, и собственно их передачи в вышеупомянутый репозиторий. Этой команде нужно право на запись в репозиторий, поэтому она использует аутентификацию.

+ **git pull** - работает как комбинация команд git fetch и git merge, т.е. Git вначале забирает изменения из указанного удалённого репозитория, а затем пытается слить их с текущей веткой.

**git pull request** - предложение изменения кода в чужом репозитории. Вы делаете форк чужого репозитория (который иногда и сам может быть форком) → производите изменения в своём форке → посредством pull request предлагаете изменения владельцам репозитория, чей форк Вы сделали. На GitHub pull request в публичный репозиторий может осуществить любая/ой зарегистрированная/ый участница/участник.

Форк (Fork) — собственное ответвление (fork) какого-то проекта. Это означает, что GitHub создаст вашу собственную копию проекта, данная копия будет находиться в вашем пространстве имён, и вы сможете легко делать изменения путём отправки (push) изменений.

+ **git rm** - позволяет удалять файлы из репозитория Git. Это удобный инструмент, объединяющий функции стандартной команды оболочки rm и команды **git add**: сначала **git rm** удаляет целевой объект из файловой системы, а затем добавляет событие удаления в раздел проиндексированных файлов. Эта команда — одна из многих, которые можно использовать для отмены изменений в Git. 

Вариант **git rm --cached** удалит файл из индекса и переместит его в категорию Untracked

## Добавление исключений в репозиторий.

Файл **.gitignore** – это обычный текстовый файл, который содержит список всех указанных файлов и папок проекта, которые Git должен игнорировать и не отслеживать.

Внутри файла **.gitignore** вы можете указать Git игнорировать только один файл или одну папку, указав имя или шаблон этого конкретного файла или папки.